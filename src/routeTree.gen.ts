/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as IdIndexImport } from './routes/id/index'
import { Route as IdDashboardImport } from './routes/id/dashboard'
import { Route as IdLayoutImport } from './routes/id/_layout'

// Create Virtual Routes

const IdImport = createFileRoute('/id')()

// Create/Update Routes

const IdRoute = IdImport.update({
  id: '/id',
  path: '/id',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const IdIndexRoute = IdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => IdRoute,
} as any)

const IdDashboardRoute = IdDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => IdRoute,
} as any)

const IdLayoutRoute = IdLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => IdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/id': {
      id: '/id'
      path: '/id'
      fullPath: '/id'
      preLoaderRoute: typeof IdImport
      parentRoute: typeof rootRoute
    }
    '/id/_layout': {
      id: '/id/_layout'
      path: '/id'
      fullPath: '/id'
      preLoaderRoute: typeof IdLayoutImport
      parentRoute: typeof IdRoute
    }
    '/id/dashboard': {
      id: '/id/dashboard'
      path: '/dashboard'
      fullPath: '/id/dashboard'
      preLoaderRoute: typeof IdDashboardImport
      parentRoute: typeof IdImport
    }
    '/id/': {
      id: '/id/'
      path: '/'
      fullPath: '/id/'
      preLoaderRoute: typeof IdIndexImport
      parentRoute: typeof IdImport
    }
  }
}

// Create and export the route tree

interface IdRouteChildren {
  IdLayoutRoute: typeof IdLayoutRoute
  IdDashboardRoute: typeof IdDashboardRoute
  IdIndexRoute: typeof IdIndexRoute
}

const IdRouteChildren: IdRouteChildren = {
  IdLayoutRoute: IdLayoutRoute,
  IdDashboardRoute: IdDashboardRoute,
  IdIndexRoute: IdIndexRoute,
}

const IdRouteWithChildren = IdRoute._addFileChildren(IdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/id': typeof IdLayoutRoute
  '/id/dashboard': typeof IdDashboardRoute
  '/id/': typeof IdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/id': typeof IdIndexRoute
  '/id/dashboard': typeof IdDashboardRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/id': typeof IdRouteWithChildren
  '/id/_layout': typeof IdLayoutRoute
  '/id/dashboard': typeof IdDashboardRoute
  '/id/': typeof IdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/login' | '/id' | '/id/dashboard' | '/id/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/login' | '/id' | '/id/dashboard'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/id'
    | '/id/_layout'
    | '/id/dashboard'
    | '/id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  IdRoute: typeof IdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  IdRoute: IdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/login",
        "/id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/id": {
      "filePath": "id",
      "children": [
        "/id/_layout",
        "/id/dashboard",
        "/id/"
      ]
    },
    "/id/_layout": {
      "filePath": "id/_layout.tsx",
      "parent": "/id"
    },
    "/id/dashboard": {
      "filePath": "id/dashboard.tsx",
      "parent": "/id"
    },
    "/id/": {
      "filePath": "id/index.tsx",
      "parent": "/id"
    }
  }
}
ROUTE_MANIFEST_END */
